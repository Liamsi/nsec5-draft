<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc1034 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY rfc1035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc2136 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY rfc2181 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY rfc2308 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY rfc3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml">
<!ENTITY rfc4033 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY rfc4034 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY rfc4035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY rfc4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY rfc5155 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5155.xml">
<!ENTITY rfc6781 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6781.xml">
<!ENTITY rfc7129 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7129.xml">
]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc category="std" docName="draft-jvcelak-nsec5-00" ipr="trust200902">
    <front>
        <title abbrev="NSEC5">NSEC5, DNSSEC Authenticated Denial of Existence</title>

        <author fullname="Jan Vcelak" initials="J." surname="Vcelak">
            <organization>CZ.NIC</organization>
            <address>
                <postal>
                    <street>Milesovska 1136/5</street>
                    <city>Praha</city>
                    <code>130 00</code>
                    <country>CZ</country>
                </postal>
                <email>jan.vcelak@nic.cz</email>
            </address>
        </author>

        <author fullname="Sharon Goldberg" initials="S." surname="Goldberg">
            <organization>Boston University</organization>
            <address>
                <postal>
                    <street>111 Cummington St, MCS135</street>
                    <city>Boston</city>
                    <region>MA</region>
                    <code>02215</code>
                    <country>USA</country>
                </postal>
                <email>goldbe@cs.bu.edu</email>
            </address>
        </author>

        <date year="2015" />

        <!-- <workgroup></workgroup> -->

        <keyword>DNS</keyword>
        <keyword>DNSSEC</keyword>
        <keyword>NSEC</keyword>

    <abstract>

        <!--
            Keep it brief. Remember, don't put any citations in the abstract, and expand your  acronyms.
        <-->

        <t>
            The Domain Name System Security (DNSSEC) Extensions introduced the NSEC resource
            record (RR) for authenticated denial of existence and the NSEC3 for hashed
            authenticated denial of existence.

            The NSEC RR allows for the entire zone contents to be enumerated if a server is
            queried for carefully chosen domain names; N queries suffice to enumerate a zone
            containing N names. The NSEC3 RR adds domain-name hashing, which makes the zone
            enumeration harder, but not impossible.

            This document introduces NSEC5, which provides an cryptographically-proven mechanism
            that prevents zone enumeration. NSEC5 has the additional advantage of not requiring
            private zone-signing keys to be present on all authoritative servers for the zone.
        </t>

    </abstract>

</front>

<middle>
    <section title="Introduction">

        <section title="Rationale">

            <!--
                You can echo the abstract in the Introduction, providing citations here, but you
                should provide more than just the abstract.
            -->

            <t>
                The DNS Security Extensions (DNSSEC) provides data integrity protection using
                public-key cryptography, while not requiring that authoritative servers compute signatures
                on-the-fly. The content of the zone is usually pre-computed and served as is.
                The evident advantages of this approach are reduced performance requirements
                per query, as well as not requiring private zone-signing keys to be present
                on nameservers facing the network.
            </t>

            <t>
                With DNSSEC, each resource record (RR) set in the zone is signed. The signature
                is retained as an RRSIG RR directly in the zone. This enables response
                authentication for data existing in the zone. To ensure integrity of denying
                answers, an NSEC chain of all existing domain names in the zone is constructed.
                The chain is made of RRs, where each RR represents two consecutive domain names in
                canonical order present in the zone. The NSEC RRs are signed the same way as
                any other RRs in the zone, and each NSEC can be used to prove that a given
                name does not existing in a part of the domain name space.
            </t>

            <t>
                As side-effect, however, the NSEC chain existence allows for the enumeration
                of the zone's contents by querying for names immediately individual RRs in the
                chain; N queries suffice to enumerate a zone containing N names. As such, the
                NSEC3 hashed denial of existence was introduced to prevent zone enumeration.
                In NSEC3, the original domain names in the NSEC chain are replaced by their
                cryptographic hashes.  While NSEC3 makes zone enumeration more difficult, offline
                dictionary attacks are still possible and have been demonstrated; this is
                because hashes may be computed offline and the space of possible domain names
                is restricted <xref target="nsec3walker" /><xref target="nsec3gpu" />.
            </t>

            <t>
                Zone enumeration can be prevented with NSEC3 if having the authoritative server
                compute NSEC3 RRs on-the-fly, in response to queries with denying responses. Usually,
                this is done with Minimally Covering NSEC3 Records or NSEC3 White Lies
                <xref target="RFC7129" />. One of the most significant disadvantage of this
                approach is a required presence of the private key on all authoritative servers
                for the zone. This is often undesirable, as the holder of the private key can
                tamper with the zone content, and having private keys on many network-facing servers
                increases the risk that keys can be compromised.
            </t>

            <t>
                To prevent zone content enumeration without keeping private keys on all
                authoritative servers, NSEC5 replaces the unkeyed cryptographic hash function used
                in NSEC3 with a public-key hashing scheme.   Hashing in NSEC5 is performed with
                a separate NSEC5K key. The public portion of this key is distributed in an
                NSEC5KEY RR, and is used to validate NSEC5 hash values.  The private portion
                of the NSEC5 key is present on all authoritative servers for the zone, and is
                used to compute hash values.
            </t>

            <t>
                Importantly, the NSEC5KEY key cannot be used to
                modify the contents of the zone. Thus, any compromise of the private NSEC5 key
                does not lead to a compromise of zone contents; all that is lost is privacy against
                zone enumeration, effectively downgrading the security of NSEC5 to that of NSEC3.
            </t>

            <t>
                The NSEC5 is not intended to replace NSEC or NSEC3. It is designed as an
                alternative mechanisms for authenticated denial of existence.
            </t>
        </section>

        <section title="Requirements">
            <t>
                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                document are to be interpreted as described in
                <xref target="RFC2119" />.
            </t>
        </section>

        <section title="Terminology">

            <t>
                The reader is assumed to be familiar with the basic DNS and DNSSEC concepts
                described in
                <xref target="RFC1034" />,
                <xref target="RFC1035" />,
                <xref target="RFC4033" />,
                <xref target="RFC4034" />,
                <xref target="RFC4035" />, and subsequent RFCs that update them:
                <xref target="RFC2136" />,
                <xref target="RFC2181" />,
                <xref target="RFC2308" />, and
                <xref target="RFC5155" />.
            </t>

            <t>
                The following terminology is used through this document:
            </t>

            <t>
                <list style="hanging">
                    <t hangText="Base32hex:">
                        The "Base 32 Encoding with Extended Hex Alphabet" as specified
                        in <xref target="RFC4648" />. The padding characters ("=") are not
                        used in NSEC5 specification.
                    </t>
                    <t hangText="Base64:">
                        The "Base 64 Encoding" as specified in <xref target="RFC4648" />.
                    </t>
                    <t hangText="NSEC5 proof:">
                        A signed hash of a domain name (hash-and-sign paradigm). A holder of the
                        private key (e.g., authoritative server) can compute the proof. Anyone
                        knowing the public key (e.g., client) can verify it's validity.
                    </t>
                    <t hangText="NSEC5 hash:">
                        A cryptographic hash (digest) of an NSEC5 proof. If the NSEC5
                        proof is known, anyone can compute and verify it's NSEC5 hash.
                    </t>
                </list>
            </t>
        </section>

    </section>

    <section title="Backward Compatibility">
        <t>
            The specification describes a protocol change that is not backward compatible
            with <xref target="RFC4035" /> and <xref target="RFC5155" />. NSEC5-unaware
            resolver will fail to validate responses introduced by this document.
        </t>

        <t>
            To prevent NSEC5-unaware resolvers from attempting to validate the responses, new
            DNSSEC algorithms identifiers are introduced, the identifiers alias with existing
            algorithm numbers. The zones signed according to this specification MUST use only
            these algorithm identifiers, thus NSEC5-unaware resolvers will treat the zone as
            insecure.
        </t>

        <t>
            The new algorithm identifiers defined by this document are listed in
            <xref target="iana_considerations" />.
        </t>
    </section>

    <section title="How NSEC5 Works">
        <t>
            To prove non-existence of a domain name in a zone, NSEC uses a chain built from
            domain names present in the zone. NSEC3 replaces the original domain names by
            their cryptographic hashes. NSEC5 is very similar to NSEC3, however a public-key
            based hashing scheme is used.
        </t>

        <t>
            In NSEC5, the original domain name is hashed twice:
        </t>

        <t>
            <list style="numbers">
                <t>
                    First, the domain name is hashed using the NSEC5 private key; the result
                    is called the NSEC5 proof.  Only an authoritative server that knows the
                    private NSEC5 key can compute the NSEC5 proof.  Any client that the knows
                    the public NSEC5 key can validate the NSEC5 proof.
                </t>
                <t>
                    Second, the NSEC5 proof is hashed using a cryptographic hash function; the
                    result is called the NSEC5 hash.  This hash can be computed by any party
                    that knows the input NSEC5 proof.
                </t>
            </list>
        </t>

        <t>
            The NSEC5 hash determines the position of a domain name in an NSEC5 chain.
            That is, all the NSEC5 hashes for a zone are sorted in their canonical order,
            and each consecutive pair forms an NSEC5 RR.
        </t>

    </section>

    <section title="The NSEC5KEY Resource Record">

        <t>
            The NSEC5KEY RR stores an NSEC5 public key. The key allows clients to verify a
            validity of NSEC5 proof sent by a server.
        </t>

        <section title="NSEC5KEY RDATA Wire Format">
            <t>
                The RDATA for NSEC5KEY RR is as shown below:
            </t>

            <figure align="center">
                <artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Algorithm   |                  Public Key                   /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                ]]></artwork>
            </figure>

            <t>
                Algorithm is a single octet identifying NSEC5 hashing algorithms.
            </t>
            <t>
                Public Key is a variable sized field holding public key material for NSEC5
                proof verification.
            </t>
        </section>

        <section title="NSEC5KEY RDATA Presentation Format">
            <t>
                The presentation format of the NSEC5KEY RDATA is as follows:
            </t>

            <t>
                The Algorithm field is represented as an unsigned decimal integer.
            </t>

            <t>
                The Public Key field is represented in Base64 encoding. Whitespace is allowed
                within the Base64 text.
            </t>
        </section>
    </section>

    <section title="The NSEC5 Resource Record">
        <t>
            The NSEC5 RR provides authenticated denial of existence for an RRset. One NSEC5 RR
            represents one piece of an NSEC5 chain, proving existence of RR types present at
            the original domain name and also non-existence of other domain names in a part of
            the hashed domain name space.
        </t>

        <section title="NSEC5 RDATA Wire Format">
            <t>
                The RDATA for NSEC5 RR is as shown below:
            </t>

            <figure align="center">
                <artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            Key Tag            |     Flags     |  Next Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     Next Hashed Owner Name                    /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                         Type Bit Maps                         /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                ]]></artwork>
            </figure>

            <t>
                Key Tag field contains the key tag value of the NSEC5KEY RR that validates the
                NSEC5 RR, in network byte order. The value is computed from the NSEC5KEY RDATA
                using the same algorithm, which is used to compute key tag values for DNSKEY RRs.
                The algorithm is defined in <xref target="RFC4034" />.
            </t>
            <t>
                Flags field is a single octet. The meaning of individual bits of the field is
                defined in <xref target="nsec5_flags" />.
            </t>
            <t>
                Next length is an unsigned single octet specifying the length of the Next Hashed
                Owner Name field in octets.
            </t>
            <t>
                Next Hashed Owner Name field is a sequence of binary octets. It contains an NSEC5
                hash of the next domain name in the NSEC5 chain.
            </t>
            <t>
                Type Bit Maps is a variable sized field encoding RR types present at the original
                owner name matching the NSEC5 RR. The format of the field is equivalent to the
                format used in NSEC3 RR, described in <xref target="RFC5155" />.
            </t>
        </section>

        <section title="NSEC5 Flags Field" anchor="nsec5_flags">
            <t>
                The following one-bit NSEC5 flags are defined:
            </t>

            <figure align="center">
                <artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|           |W|O|
+-+-+-+-+-+-+-+-+
                ]]></artwork>
            </figure>

            <t>
                <list>
                    <t>O - Opt-Out flag</t>
                    <t>W - Wildcard flag</t>
                </list>
            </t>

            <t>
                All the other flags are reserved for future use and MUST be zero.
            </t>

            <t>
                The Opt-Out flag has the same semantics as in NSEC3. The definition and
                considerations in <xref target="RFC5155" /> are valid, except that NSEC3
                is replaced by NSEC5.
            </t>

            <t>
                The Wildcard flag indicates that a wildcard synthesis is possible at the
                original domain name level (i.e., there is a wildcard node immediately
                descending from the immediate ancestor of the original domain name). The
                purpose of the Wildcard flag is to reduce a maximum number of RRs required for
                authenticated denial of existence proof.
            </t>
        </section>

        <section title="NSEC5 RDATA Presentation Format">
            <t>
                The presentation format of the NSEC5 RDATA is as follows:
            </t>

            <t>
                The Key Tag field is represented as an unsigned decimal integer.
            </t>

            <t>
                The Flags field is represented as an unsigned decimal integer.
            </t>

            <t>
                The Next Length field is not represented.
            </t>

            <t>
                The Next Hashed Owner Name field is represented as a sequence
                of case-insensitive Base32hex digits without any whitespace and
                without padding.
            </t>

            <t>
                The Type Bit Maps representation is equivalent to the representation
                used in NSEC3 RR, described in <xref target="RFC5155" />.
            </t>
        </section>
    </section>

    <section title="The NSEC5PROOF Resource Record">
        <t>
            The NSEC5PROOF record is synthesised by the authoritative server on-the-fly. The
            record contains the NSEC5 proof, proving a position of the owner name in an
            NSEC5 chain.
        </t>

        <section title="NSEC5PROOF RDATA Wire Format">
            <t>
                The RDATA for NSEC5PROOF is as as shown below:
            </t>

            <figure align="center">
                <artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            Key Tag            |        Owner Name Hash        /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                ]]></artwork>
            </figure>

            <t>
                Key Tag field contains the key tag value of the NSEC5KEY RR that validates
                the NSEC5PROOF RR, in network byte order.
            </t>
            <t>
                Owner Name Hash is a variable sized sequence of binary octets encoding the NSEC5
                proof corresponding to the owner name.
            </t>
        </section>

        <section title="NSEC5PROOF RDATA Presentation Format">
            <t>
                The presentation format of the NSEC5PROOF RDATA is as follows:
            </t>

            <t>
                The Key Tag field is represented as an unsigned decimal integer.
            </t>

            <t>
                The Owner Name Hash is represented in Base64 encoding. Whitespace
                is allowed within the Base64 text.
            </t>
        </section>
    </section>

    <section title="NSEC5 Proofs">

        <t>
            The NSEC5 ...
        </t>

        <section title="Name Error Responses">

            <t>
                Facts to prove:
                <list>
                    <t>No RRset matching the QNAME exactly exists.</t>
                    <t>No RRset matching the QNAME via wildcard expansion exists.</t>
                    <t>The QNAME does not fall into a delegation.</t>
                    <t>The QNAME does not fall into a DNAME redirection.</t>
                </list>
            </t>

            <t>
                NSEC5 and NSEC5PROOF RRs to include in the answer:
                <list>
                    <t>Closest encloser.</t>
                    <t>Next closer name.</t>
                </list>
            </t>

            <t>
                Validator checks:
                <list>
                    <t>Closest encloser belongs to the zone.</t>
                    <t>Closest encloser has the Wildcard flag cleared.</t>
                    <t>Closest encloser does not have NS without SOA in the Type Bit Map.</t>
                    <t>Closest encloser does not have DNAME in the Type Bit Maps.</t>
                    <t>Next closer name is derived correctly.</t>
                </list>
            </t>

        </section>

        <section title="No Data Responses">

            <t>
                The processing of No Data responses for DS QTYPE differs, if Opt-Out is in effect.
            </t>

            <section title="QTYPE is not DS or Opt-Out Not In Effect">

                <t>
                    Facts to prove:
                    <list>
                        <t>An RRset matching the QNAME exists.</t>
                        <t>No QTYPE RRset matching the QNAME exists.</t>
                        <t>No CNAME RRset matching the QNAME exists.</t>
                    </list>
                </t>

                <t>
                    NSEC5 and NSEC5PROOF RRs to include in the answer:
                    <list>
                        <t>QNAME.</t>
                    </list>
                </t>

                <t>
                    Validator checks:
                    <list>
                        <t>The NSEC5 RR exactly matches the QNAME.</t>
                        <t>The NSEC5 RR does not have QTYPE in the Type Bit Map.</t>
                        <t>The NSEC5 RR does not have CNAME in the Type Bit Map.</t>
                    </list>
                </t>

            </section>

            <section title="QTYPE is DS and Opt-Out In Effect">

                <t>
                    Facts to prove:
                    <list>
                        <t>Closest provable encloser has the Opt-Out flag set.</t>
                    </list>
                </t>

                <t>
                    NSEC5 and NSEC5PROOF RRs to include in the answer:
                    <list>
                        <t>Closest provable encloser.</t>
                    </list>
                </t>

                <t>
                    Validator checks:
                    <list>
                        <t>Closest provable encloser is in zone.</t>
                        <t>Closest provable encloser covers (not matches).</t>
                        <t>Closest provable encloser has the Opt-Out flag set.</t>
                    </list>
                </t>

            </section>

        </section>

        <section title="Wildcard Responses">

            <t>
                Facts required to prove:
                <list>
                    <t>No RRset matching the QNAME exactly exists.</t>
                    <t>No wildcard closer to the QNAME exists.</t>
                </list>
            </t>

            <t>
                NSEC5 and NSEC5PROOF RRs to include in the answer:
                <list>
                    <t>Next closer name.</t>
                </list>
            </t>
            <t>
                Validator:
                <list>
                    <t>Next closer name is derived correctly.</t>
                    <t>Next closer name covers (not matches).</t>
                </list>
            </t>

        </section>

        <section title="Wildcard No Data Responses">

            <t>
                Facts required to prove:
                <list>
                    <t>No RRset matching the QNAME exactly exists.</t>
                    <t>No QTYPE RRset exists at the wildcard matching the QNAME.</t>
                    <t>No CNAME RRset exists at the wildcard matching the QNAME.</t>
                    <t>No wildcard closer to the QNAME exists.</t>
                </list>
            </t>

            <t>
                NSEC5 and NSEC5PROOF RRs to include in the answer:
                <list>
                    <t>Source of wildcard synthesis (i.e., wildcard at closest encloser).</t>
                    <t>Next closer name.</t>
                </list>
            </t>

            <t>
                Validator:
                <list>
                    <t>Source of synthesis NSEC5 matches exactly.</t>
                    <t>Source of synthesis NSEC5 RR does not have QTYPE in the Type Bit Map.</t>
                    <t>Source of synthesis NSEC5 RR does not have CNAME in the Type Bit Map.</t>
                    <t>Next closer name is derived correctly.</t>
                    <t>Next closer name NSEC5 hash covers (not matches).</t>
                </list>
            </t>

        </section>
    </section>

    <section title="Authoritative Server Considerations">

        <section title="Zone Signing">
            <t>
                Zones using NSEC5 MUST satisfy the same properties as described in Section 7.1
                of <xref target="RFC5155" />, with NSEC3 replaced by NSEC5. In addition, the
                following conditions MUST be satisfied as well:
            </t>

            <t>
                <list style="symbols">
                    <t>
                        If the original owner name has a wildcard label immediately descending
                        from the original owner name, the corresponding NSEC5 RR MUST have the
                        Wildcard flag set in the Flags field. Otherwise, the flag MUST be cleared.
                    </t>
                    <t>
                        The zone apex MUST include an NSEC5KEY RRset containing a NSEC5 public
                        key allowing verification of the current NSEC5 chain.
                    </t>
                </list>
            </t>

            <t>
                The following steps describe one possible method to properly add required NSE5
                related records into a zone. This is not the only such existing method.
            </t>

            <t>
                <list style="numbers">
                    <t>
                        Select an algorithm for NSEC5.  Generate the public and private NSEC5 keys.
                    </t>
                    <t>
                        Add a NSEC5KEY RR into the zone apex containing the public NSEC5 key.
                    </t>
                    <t>
                        For each unique original domain name in the zone and each empty
                        non-terminal, add an NSEC5 RR. If Opt-Out is used, owner names of
                        unsigned delegations MAY be excluded.
                        <list style="letters">
                            <t>
                                The owner name of the NSEC5 RR is the NSEC5 hash of the
                                original owner name encoded in Base32hex without padding,
                                prepended as a single label to the zone name.
                            </t>
                            <t>
                                Set the Key Tag field to be the key tag corresponding
                                to the public NSEC5 key.
                            </t>
                            <t>
                                Clear the Flags field. If Opt-Out is being used, set the Opt-Out
                                flag. If there is a wildcard label directly descending from the
                                original domain name, set the Wildcard flag. Note that the
                                wildcard can be empty non-terminal.
                            </t>
                            <t>
                                Set the Next Length field to a value determined by the used
                                NSEC5 algorithm. Leave the Next Hashed Owner Name field blank.
                            </t>
                            <t>
                                Set the Type Bit Maps field based on the RRsets present at the
                                original owner name.
                            </t>
                        </list>
                    </t>
                    <t>
                        Sort the set of NSEC5 RRs into canonical order.
                    </t>
                    <t>
                        For each NSEC5 RR, set the Next Hashed Owner Name field by using the owner
                        name of the next NSEC5 RR in the canonical order. If the updated NSEC5 is
                        the last NSEC5 RR in the chain, the owner name of the first NSEC5 RR
                        in the chain is used instead.
                    </t>
                </list>
            </t>

        </section>

        <section title="Zone Serving">
            <t>
                This specification modifies DNSSEC-enabled DNS responses generated by
                authoritative servers. In particular, it replaces use of NSEC or NSEC3 RRs in
                such responses with NSEC5 RRs and adds on-the-fly computed NSEC5PROOF RRs.
            </t>

            <t>
                The authenticated denial of existence proofs in NSEC5 are almost the same
                as in NSEC3. However, due to introduction of Wildcard flag in NSEC5 RRs, the
                NSEC5 proof consists from (up to) two NSEC5 RRs, instead of (up to) three.
            </t>

            <t>
                NSEC5 MUST NOT be used in parallel with NSEC, NSEC3, or any other authenticated
                denial of  existence mechanism that allows for enumeration of zone contents.
            </t>

            <t>
                If NSEC5 is used, the answering server MUST use exactly one NSEC5 chain for
                one signed zone.
            </t>

            <t>
                <cref>
                    TODO: CNAME considerations, DNAME considerations, DS considerations, NSEC5 type queries
                </cref>
                <cref>
                    TODO: proofs explanation - closes encloser proof, denial of wildcard synthesis,
                    source of synthesis, denial of source of synthesis
                </cref>
            </t>

        </section>

        <section title="NSEC5KEY Rollover Mechanism">
            <t>
                Replacement of the NSEC5 key implies generating a new NSEC5 chain. The NSEC5KEY
                rollover mechanism is similar to "Pre-Publish Zone Signing Key Rollover" as
                specified in <xref target="RFC6781" />. The NSEC5KEY rollover MUST be
                performed as a sequence of the following steps:
            </t>

            <t>
                <list style="numbers">
                    <t>
                        A new public NSEC5 key is added into the NSEC5KEY RRset in the zone apex.
                    </t>
                    <t>
                        The old NSEC5 chain is replaced by a new NSEC5 chain constructed
                        using the new key. This replacement MUST happen as a single automic
                        operation; the server MUST NOT be responding with RRs from
                        both the new and old chain at the same time.
                    </t>
                    <t>
                        The old public key is removed from the NSEC5KEY RRset in the zone apex.
                    </t>
                </list>
            </t>

            <t>
                The minimal delay between the steps 1. and 2. MUST be the time it takes for the
                data to propagate to the authoritative servers, plus the TTL value of the old
                NSEC5KEY RRset.
            </t>

            <t>
                Steps 2. and 3. MAY be performed simultaneously.
            </t>
        </section>

        <section title="Secondary Servers">
            <t>
                This document does not define mechanism to distribute NSEC5 private keys.
            </t>
        </section>

        <section title="Zones Using Unknown Hash Algorithms">
        </section>

        <section title="Dynamic Updates">
        </section>

    </section>

    <section title="Resolver Considerations">
        <section title="NSEC5 Resource Record Caching">
        </section>

        <section title="NSEC5PROOF Resource Record Caching">
        </section>
    </section>

    <section title="Validator Considerations">
        <section title="Responses With Unknown Hash Types">
        </section>

        <section title="Validating Name Error Responses">
        </section>

        <section title="Validating No Data Responses">
        </section>

        <section title="Validating Wildcard Answer Responses">
        </section>

        <section title="Validating Wildcard No Data Responses">
        </section>

        <section title="Validating Referrals">
        </section>
    </section>

    <section title="Special Considerations">

        <section title="Transition Mechanism">
            <t>
                TODO:
                The zone transitioning to NSEC5 should publish NSEC5KEY RR with a key to be used,
                wait till the data propagate to caches, The switch from NSEC or NSEC3 to NSEC5
                is instant. The server will start responding with NSEC5 proofs, instead of
                previously used mechanism.
            </t>

            <t>
                TODO:
                The reverse-transition is possible instneusly. The server will start respoding
                with pre-NSEC5 authenticated denial mechanism. The NSEC5KEY MUST not be removed
                till the old NSEC5 records expire from caches.
            </t>

            <t>
                <cref>TODO: Transition from NSEC or NSEC3</cref>
            </t>

            <t>
                <cref>TODO: Transition from NSEC5 to NSEC/NSEC3</cref>
            </t>

            <t>
                <cref>TODO: transition to new algorithms withtin NSEC5</cref>
            </t>

        </section>

        <section title="NSEC5 Private Keys">
            <t>
                This document does not define format to store NSEC5 private key. Use of
                standardized and adopted format is RECOMMENDED.
            </t>

            <t>
                The NSEC5 private key MAY be shared between multiple zones, however a separate
                key is RECOMMENDED for each zone.
            </t>
        </section>

        <section title="Domain Name Length Restrictions">

            <t>

            </t>

        </section>

    </section>

    <section title="Performance Considerations">
    </section>

    <section title="Security Considerations">

        <t><cref>TODO: attacks</cref></t>

        <t><cref>TODO: hash collisions</cref></t>

        <t><cref>TODO: recommended key sizes</cref></t>

        <t><cref>TODO: private key protection</cref></t>

        <t><cref>TODO: what if defined algorithm (RSA/FDH) is broken</cref></t>

    </section>

    <section title="IANA Considerations" anchor="iana_considerations">

        <t>
            This document updates the IANA registry "Domain Name System (DNS)
            Parameters" in subregistry "Resource Record (RR) TYPEs", by
            defining the following new RR types:
        </t>

        <t>
            <list>
                <t>NSEC5KEY   value XXX.</t>
                <t>NSEC5      value XXX.</t>
                <t>NSEC5PROOF value XXX.</t>
            </list>
        </t>

        <t>
            This document creates a new IANA registry for NSEC5 algorithms.
            This registry is named "DNSSEC NSEC5 Algorithms". The initial
            content of the registry is:
        </t>

        <t>
            <list>
                <t>0     is Reserved.</t>
                <t>1     is FDH-SHA256-SHA256.</t>
                <t>2-255 is Available for assignment.</t>
            </list>
        </t>

        <t>
            This document updates the IANA registry "DNS Security Algorithm Numbers" by
            defining following aliases:
        </t>

        <t>
            <list>
                <t>XXX is NSEC5-RSASHA256, alias for RSASHA256 (8).</t>
                <t>XXX is NSEC5-RSASHA512, alias for RSASHA512 (10).</t>
                <t>XXX is NSEC5-ECDSAP256SHA256 alias for ECDSAP256SHA256 (13).</t>
                <t>XXX is NSEC5-ECDSAP384SHA384 alias for ECDSAP384SHA384 (14).</t>
            </list>
        </t>
    </section>

    <section title="Contributors">
        <t><cref>
            [TEMPLATE TODO] This optional section can be used to mention contributors
            to your internet draft.
        </cref></t>
    </section>

</middle>

<back>
    <!-- References Section -->

<!--
     Section 4.7f of [RFC2223bis] specifies the requirements for the
     references sections.  In particular, there MUST be separate lists of
     normative and informative references, each in a separate section.
     The style SHOULD follow that of recently published RFCs.

     In general, each normative reference SHOULD reference the most recent
     version of the specification in question.
-->

    <references title="Normative References">
        &rfc1034;
        &rfc1035;
        &rfc2119;
        &rfc2136;
        &rfc2181;
        &rfc2308;
        &rfc4033;
        &rfc4034;
        &rfc4035;
        &rfc4648;
        &rfc5155;
    </references>

    <references title="Informative References">

        <reference anchor="nsec5">
            <front>
                <title>NSEC5: Provably Preventing DNSSEC Zone Enumeration</title>
                <author initials="S." surname="Goldberg"><organization /></author>
                <author initials="M." surname="Naor"><organization /></author>
                <author initials="D." surname="Papadopoulos"><organization /></author>
                <author initials="L." surname="Reyzin"><organization /></author>
                <author initials="S." surname="Vasant"><organization /></author>
                <author initials="A." surname="Ziv"><organization /></author>
                <date year="2014" month="July" />
            </front>
        </reference>

        <reference anchor="nsec3gpu">
            <front>
                <title>GPU-Based NSEC3 Hash Breaking</title>
                <author initials="M." surname="Wander"><organization /></author>
                <author initials="L." surname="Schwittmann"><organization /></author>
                <author initials="C." surname="Boelmann"><organization /></author>
                <author initials="T." surname="Weis"><organization /></author>
                <date year="2014" />
            </front>
            <seriesInfo name="in" value="IEEE Symp. Network Computing and Applications (NCA)" />
        </reference>

        <reference anchor="nsec3walker" target="http://dnscurve.org/nsec3walker.html">
            <front>
                <title>Nsec3 walker</title>
                <author initials="D. J." surname="Bernstein"><organization /></author>
                <date year="2011" />
            </front>
        </reference>

        &rfc3447;
        &rfc6781;
        &rfc7129;

    </references>

    <section title="Full Domain Hash Algorithm" anchor="fdh">
        <t>
            The Full Domain Hash (FDH) is a RSA-based scheme that allows authentication of
            hashes using public-key cryptography.
        </t>

        <t>
            In this document, the notation from <xref target="RFC3447" /> is used.
        </t>

        <t>
            Used parameters:
            <list>
                <t>(n, e) - RSA public key</t>
                <t>K - RSA private key</t>
                <t>k - length of the RSA modulus n in octets</t>
            </list>
        </t>

        <t>
            Fixed options:
            <list>
                <t>Hash - hash function</t>
            </list>
        </t>

        <t>
            Used primitives:
            <list>
                <t>
                    I2OSP - Coversion of a nonnegative integer to an octet string as defined in
                    Section 4.1 of <xref target="RFC3447" />
                </t>
                <t>
                    OS2IP - Coversion of an octet string to a nonnegative integer as defined in
                    Section 4.2 of <xref target="RFC3447" />
                </t>
                <t>
                    RSASP1 - RSA signature primitive as defined in
                    Section 5.2.1 of <xref target="RFC3447" />
                </t>
                <t>
                    RSAVP1 - RSA verification primitive as defined in
                    Section 5.2.2 of <xref target="RFC3447" />
                </t>
                <t>
                    MGF1 - Mask Generation Function based on a hash function as defined in
                    Section B.2.1 of <xref target="RFC3447" />
                </t>
            </list>
        </t>

        <section title="FDH signature">
            <t>
                FDH_SIGN(K, M)
            </t>

            <t>
                Input:
                <list>
                    <t>K - RSA private key</t>
                    <t>M - message to be signed, an octet string</t>
                </list>
            </t>

            <t>
                Output:
                <list>
                    <t>S - signature, an octet string of length k</t>
                </list>
            </t>

            <t>
                Steps:
                <list style="numbers">
                    <t>EM = MGF1(M, k - 1)</t>
                    <t>m = OS2IP(EM)</t>
                    <t>s = RSASP1(K, m)</t>
                    <t>S = I2OSP(s, k)</t>
                    <t>Output S</t>
                </list>
            </t>
        </section>

        <section title="FDH verification">
            <t>
                FDH_VERIFY((n, e), M, S)
            </t>

            <t>
                Input:
                <list>
                    <t>(n, e) - RSA public key</t>
                    <t>M - message whose signature is to be verified, an octet string</t>
                    <t>S - signature to be verified, an octet string of length k</t>
                </list>
            </t>

            <t>
                Output:
                <list>
                    <t>"valid signature" or "invalid signature"</t>
                </list>
            </t>

            <t>
                Steps:
                <list style="numbers">
                    <t>s = OS2IP(S)</t>
                    <t>m = RSAVP1((n, e), s)</t>
                    <t>EM = I2OSP(m, k - 1)</t>
                    <t>EM' = MGF(M, k - 1)</t>
                    <t>
                        If EM and EM' are the same, output "valid signature";
                        else output "invalid signature".
                    </t>
                </list>
            </t>
        </section>
    </section>


    <section title="Change Log">
        <t>
            Note to RFC Editor: if this document does not obsolete an existing RFC,
            please remove this appendix before publication as an RFC.
        </t>
    </section>

    <section title="Open Issues">
        <t>
            Note to RFC Editor: please remove this appendix before publication as an RFC.
        </t>

        <t>
            <list style="numbers">
                <t>
                    Consider alternative way to signalize NSEC5 support. The NSEC5 could use
                    only one DNSSEC algorithm identifier, and the actual algorithm to be used
                    can be the first byte in DNSKEY public key field and RRSIG signature field.
                </t>
                <t>
                    How to add new NSEC5 hashing algorithm. We will need to add new DNSSEC
                    algorithm identifiers again.
                </t>
                <t>
                    The Opt-Out needn't to be indicated in the zone, it should be set in signing
                    tool configuration.
                </t>
                <t>
                    Check if the Wildcard flag and proofs work with empty non-terminal wildcards.
                </t>
                <t>
                    NSEC and NSEC3 define optional steps for hash collisions detection. We don't
                    have a way to avoid them if they really appear (unlikely). We would have
                    to drop the signing key and generate a new one. Which cannot be done
                    instantly.
                </t>
                <t>
                    Contributor list has to be completed.
                </t>
            </list>
        </t>
    </section>
  </back>
</rfc>
<!-- vim: et ts=4 sts=4 sw=4 colorcolumn=100 spell :
-->
